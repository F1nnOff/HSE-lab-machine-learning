{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Лабораторная работа 2\n",
    "\n",
    "## Линейная регрессия"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Метод наименьших квадратов: постановка задачи\n",
    "\n",
    "Рассмотрим систему уравнений $Xa = y$, в которой $a$ &mdash; столбец неизвестных. Её можно переписать в векторном виде\n",
    "$$x_1 a_1 + x_2 a_2 + \\ldots + x_k a_k = y,$$\n",
    "где $x_1,\\ldots,x_n$ &mdash; столбцы матрицы $X$. Таким образом, решить исходную систему означает найти линейную комбинацию векторов $x_1,\\ldots,x_n$, равную правой части. Но что делать, если такой линейной комбинации не существует? Геометрически это означает, что вектор $y$ не лежит в подпространстве $U = \\langle x_1,\\ldots, x_k\\rangle$. В этом случае мы можем найти *псевдорешение*: вектор коэффициентов $\\hat{a}$, для которого линейная комбинация $x_1 \\hat{a}_1 + x_2 \\hat{a}_2 + \\ldots + x_k \\hat{a}_k$ хоть и не равна в точности $y$, но является наилучшим приближением &mdash; то есть ближайшей к $y$ точкой $\\hat{y}$ подпространства $U$ (иными словами, ортогональной проекцией $y$ на это подпростанство). Итак, цель наших исканий можно сформулировать двумя эквивалентными способами:\n",
    "\n",
    "1. Найти вектор $\\hat{a}$, для которого длина разности $|X\\hat{a} - y|$ минимальна (отсюда название \"метод наименьших квадратов\");\n",
    "2. Найти ортогональную проекцию $\\hat{y}$ вектора $y$ на подпространство $U$ и представить её в виде $X\\hat{a}$.\n",
    "\n",
    "Далее мы будем предполагать, что векторы $x_1,\\ldots,x_n$ линейно независимы (если нет, то сначала имеет смысл выделить максимальную линейно независимую подсистему).\n",
    "\n",
    "На лекциях было показано, что проекция вектора $y$ на подпространство $U = \\langle x_1,\\ldots, x_k\\rangle$ записывается в виде\n",
    "$$\\hat{y} = X\\left(X^TX\\right)^{-1}X^Ty,$$\n",
    "и, соответственно, искомый вектор $\\hat{a}$ равен\n",
    "$$\\hat{a} = \\left(X^TX\\right)^{-1}X^Ty.$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задача линейной регрессии\n",
    "\n",
    "Начнём с примера. Допустим, вы хотите найти зависимость среднего балла S студента ФКН от его роста H, веса W, длины волос L и N &mdash; количества часов, которые он ежедневно посвящает учёбе. Представьте, что мы измерили все эти параметры для $n$ студентов и получили наборы значений $S_1,\\ldots, S_n$, $H_1,\\ldots, H_n$ и так далее.\n",
    "\n",
    "Тут можно подбирать много разных умных моделей, но начать имеет смысл с самой простой, линейной:\n",
    "$$S = a_1H + a_2W + a_3L + a_4N + a_5.$$\n",
    "Конечно, строгой линейной зависимости нет (иначе можно было бы радостно упразднить экзамены), но мы можем попробовать подобрать коэффициенты $a_1, a_2, a_3, a_4, a_5$, для которых отклонение правой части от наблюдаемых было бы наименьшим:\n",
    "$$\\sum_{i=1}^n\\left(S_i - ( a_1H_i + a_2W_i + a_3L_i + a_4N_i + a_5)\\right)^2 \\longrightarrow \\min$$\n",
    "И сразу видно, что мы получили задачу на метод наименьших квадратов! А именно, у нас\n",
    "$$X =\n",
    "\\begin{pmatrix}\n",
    "H_1 & W_1 & L_1 & N_1 & 1\\\\\n",
    "H_2 & W_2 & L_2 & N_2 & 1\\\\\n",
    "\\dots & \\dots & \\dots & \\dots & \\dots \\\\\n",
    "H_n & W_n & L_n & N_n & 1\n",
    "\\end{pmatrix},\\qquad y=\n",
    "\\begin{pmatrix}\n",
    "S_1\\\\ S_2\\\\ \\vdots \\\\ S_n\n",
    "\\end{pmatrix}$$\n",
    "\n",
    "Решая эту задачу с помощью уже известных формул, получаем оценки коэффициентов $\\hat{a}_i$ ($i = 1\\ldots,5$)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь проговорим общую постановку задачи линейной регрессии. У нас есть $k$ переменных $x_1,\\ldots,x_k$ (\"регрессоров\"), через которые мы хотим выразить \"объясняемую переменную\" $y$:\n",
    "$$y = a_1x_1 + a_2x_2 + \\ldots + a_kx_k$$\n",
    "Значения всех переменных мы измерили $n$ раз (у $n$ различных объектов, в $n$ различных моментов времени &mdash; это зависит от задачи). Подставим эти данные в предыдущее равенство:\n",
    "$$\\begin{pmatrix}\n",
    "y_1\\\\ y_2 \\\\ \\vdots \\\\ y_n\n",
    "\\end{pmatrix} = \n",
    "a_1\\begin{pmatrix}\n",
    "x_{11} \\\\ x_{21} \\\\ \\vdots \\\\ x_{n1} \\end{pmatrix} + a_2\\begin{pmatrix}\n",
    "x_{12} \\\\ x_{22} \\\\ \\vdots \\\\ x_{n2} \\end{pmatrix} + \\ldots + a_k\\begin{pmatrix}\n",
    "x_{1k} \\\\ x_{2k} \\\\ \\vdots \\\\ x_{nk} \\end{pmatrix}$$\n",
    "(здесь $x_{ij}$ &mdash; это значение $j$-го признака на $i$-м измерении). Это удобно переписать в матричном виде:\n",
    "$$\\begin{pmatrix}\n",
    "x_{11} & x_{12} & \\ldots & x_{1k}\\\\\n",
    "x_{21} & x_{22} & \\ldots & x_{2k}\\\\\n",
    "\\dots & \\dots & \\dots & \\dots\\\\\n",
    "x_{n1} & x_{n2} & \\ldots & x_{nk}\n",
    "\\end{pmatrix} \\cdot\n",
    "\\begin{pmatrix}\n",
    "a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_k\n",
    "\\end{pmatrix} = \n",
    "\\begin{pmatrix}\n",
    "y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n\n",
    "\\end{pmatrix}$$\n",
    "или коротко $Xa = y$. Поскольку на практике эта система уравнений зачастую не имеет решения (ибо зависимости в жизни редко бывают действительно линейными), методом наименьших квадратов ищется псевдорешение."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Оценка качества. Обобщающая способность. Обучение и тест \n",
    "\n",
    "После того, как вы построили регрессию и получили какую-то зависимость объясняемой переменной от регрессоров, настаёт время оценить качество регрессии. Есть много разных функционалов качества; мы пока будем говорить только о самом простом и очевидном из них &mdash; о среднеквадратичной ошибке (mean square error). Она равна\n",
    "$$\\frac1{n}|X\\hat{a} - y|^2 = \\frac1{n}\\sum_{i=1}^n\\left(\\hat{a}_1x_{i1} + \\hat{a}_2x_{i2} + \\ldots + \\hat{a}_kx_{ik} - y_i\\right)^2$$\n",
    "\n",
    "В целом хочется искать модели с наименьшей mean square error на имеющихся данных. Однако слишком фанатичная гонка за минимизацией ошибки может привести к печальным последствиям. Например, если мы приближаем функцию одной переменной по значениям в $n$ точках, то наилучшей с точки зрения этой ошибки моделью будет многочлен $(n-1)$-й степени, для которого эта ошибка будет равна нулю.  Тем не менее, вряд ли истинная зависимость имеет вид многочлена большой степени. Более того, значения вам скорее всего даны с погрешностью, то есть вы подогнали вашу модель под свои зашумлённые данные, но на любых других данных (то есть в других точках) точность, скорее всего, окажется совсем не такой хорошей. Этот эффект называют **переобучением**; говорят также, что **обобщающая способность** модели оказалась скверной.\n",
    "\n",
    "Чтобы не попадать в эту ловушку, данные обычно делят на обучающие (по которым строят модель и оценивают коэффициенты) и тестовые. Лучшей стоит счесть ту модель, для которой значение функционала качества будет меньше."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задание 1. Метод наименьших квадратов (4 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Скачайте файлы ``train.txt`` и ``test.txt``. В первом из них находится обучающая выборка, а во втором &mdash; тестовая. Каждый из файлов содержит два столбца чисел, разделённых пробелами: в первом &mdash; $n$ точек (значения аргумента $x$), во втором &mdash; значения некоторой функции $y = f(x)$ в этих точках, искажённые случайным шумом. Ваша задача &mdash; по обучающей выборке подобрать функцию $y = g(x)$, пристойно приближающую неизвестную вам зависимость."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Загрузим обучающие и тестовые данные (не забудьте ввести правильный путь!)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.linalg as sla\n",
    "import matplotlib.pyplot as plt\n",
    "data_train = numpy.loadtxt('/Users/user/train.txt', delimiter=',')\n",
    "data_test = numpy.loadtxt('/Users/user/test.txt', delimiter=',')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разделим значения $x$ и $y$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = data_train[:,0]\n",
    "y_train = data_train[:,1]\n",
    "X_test = data_test[:,0]\n",
    "y_test = data_test[:,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Найдите с помощью метода наименьших квадратов линейную функцию ($y = kx + b$), наилучшим образом приближающую неизвестную зависимость. Полезные функции: ``numpy.ones(n)`` для создания массива из единиц длины $n$ и ``numpy.concatenate((А, В), axis=1)`` для слияния двух матриц по столбцам (пара ``А`` и ``В`` превращается в матрицу ``[A B]``)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 2.2791344980519463 * x + 4.433230905064935\n"
     ]
    }
   ],
   "source": [
    "n = len(X_train)\n",
    "b = np.ones(n)\n",
    "X = np.column_stack((X_train, b))\n",
    "#обучение\n",
    "ai = np.dot(np.dot(sla.inv(np.dot(np.transpose(X),X)),np.transpose(X)),y_train)\n",
    "print('y =', ai[0],'* x +', ai[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Нарисуйте на плоскости точки $(x_i, y_i)$ и полученную линейную функцию. Глядя на данные, подумайте, многочленом какой степени можно было бы лучше всего приблизить эту функцию. Найдите этот многочлен и нарисуйте его график."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3dd3zT1ff48ddlVxCqDIUCgsqmA6zIlL0RFRFBUAERypCNgHxAARWVJXuogCiKwo8lG1kCyiiyRxGZLXuvAh3n90fHt7Rpm7RpkzTn+Xjk0fT9vnnnJG1Obm7u+1wjIiillHJ9mRwdgFJKKfvQhK6UUhmEJnSllMogNKErpVQGoQldKaUyiCyOuuN8+fJJsWLFHHX3Sinlknbv3n1FRPJb2uewhF6sWDECAwMddfdKKeWSjDGnE9unQy5KKZVBaEJXSqkMQhO6UkplEA4bQ7ckLCyM4OBg7t+/7+hQlHIpOXLkoHDhwmTNmtXRoSgHcqqEHhwczOOPP06xYsUwxjg6HKVcgohw9epVgoODKV68uKPDUQ7kVEMu9+/fJ2/evJrMlbKBMYa8efPqJ1vlXD10QJO5UingiNfNkj0hjF4TxLkboRTy9GBAw1K8VsEr3eNQ/8fpErpSyvkt2RPC4EUHCA2LACDkRiiDFx0A0KTuQE415JIRtW/fnoULFybbbs6cOZw6dYr0qE9/6tQpypcvb9NtrH0c8c2bNw8fHx98fHyoWrUq+/btS9Dm3r17NG3alNKlS1OuXDkGDRoUu69Pnz74+fnh5+dHyZIl8fT0jN03cOBAypcvT/ny5fn1119timvTpk00a9bM5scT18KFCzHGJHmC3K1bt/Dy8qJHjx6x2xo1aoSvry/lypUjICCAiIiopDh06FB8fHzw8/OjQYMGnDt3LlXxpaXRa4Jik3mM0LAIRq8JclBECjShO1xISAjvv/8+Z86cYevWrQQEBKT6mLVq1eLUqVOpD84OihcvzubNm9m/fz9Dhw6lc+fOFtv179+fo0ePsmfPHrZt28aqVasAGD9+PHv37mXv3r18+OGHtGjRAoAVK1bwzz//sHfvXnbs2MHo0aO5detWuj2u27dvM3HiRF566aUk2w0dOpSaNWs+su23335j3759HDx4kMuXL7NgwQIABgwYwP79+9m7dy/NmjVjxIgRaRZ/ap27EWrTdpU+NKHHMXToUCZMmBD7+5AhQ5g4caJdj9++fXsiIyNjt3l5efHFF18wa9Ys5s+fz7Rp0xLc7tVXX2Xu3LkAzJgxg7Zt26Y6lvDwcN577z18fHxo2bIl9+7dS9XjSEzVqlV54oknAKhcuTLBwcEJ2jz22GPUrl0bgGzZslGxYkWL7X755RfatGkDwOHDh6lZsyZZsmQhZ86c+Pr6snr1aqsfA0T1nl9//XXKli1LQECAVY8nxtChQ/noo4/IkSNHom12797NxYsXadCgwSPbc+fODUT9DR4+fBg7/h2zHeDu3btO/X1SIU8Pm7ar9OG0Y+i9V/dm74W9dj2m39N+fNPom0T3v//++7Ro0YJevXoRGRnJ/Pnz2blzZ4J2NWrU4Pbt2wm2jxkzhnr16lk89kcffcTNmzeZPXv2Iy/Uc+fO8cknn9CxY0eKFy9O9+7dEyT1mTNnUq1aNYoXL87YsWPZvn27tQ85UUFBQXz//fdUq1aNjh07MnXqVPr375/s7eI/jj59+rBx48YE7Vq3bv3I0AnA999/T+PGjZM8/o0bN/j999/p1avXI9tPnz7NyZMnqVOnDgC+vr4MHz6cvn37cu/ePTZu3EjZsmWTjT+unTt3cvjwYZ555hkaNWrEokWLaNmyJW+99RZBQQmHDvr27cu7777Lnj17OHv2LM2aNWPMmDEWjx0ZGUm/fv348ccfWb9+fYL9DRs2ZOfOnTRu3JiWLVvGbh8yZAhz584lT548Fp9XZzGgYalHxtABPLJmZkDDUg6MyjXsCN5BkTxFKPR4Ibsf22kTuiMUK1aMvHnzsmfPHi5evEiFChXImzdvgnZbtmyx6bgjR47kpZdeYubMmQn2FSpUiG+//ZY5c+ZQo0YN2rVrl6DNU089xYgRI6hduzaLFy/mySefTNBm9uzZsZ8ujh8/TpMmTciWLRvFixdn8eLFCdoXKVKEatWqAdCuXTsmTpyYbEK39DjGjx+f9IOPtnHjRr7//nu2bt2aaJvw8HDatGlDz549efbZZx/ZN3/+fFq2bEnmzJkBaNCgAbt27aJq1arkz5+fKlWqkCWLbf/OlSpVir2fNm3asHXrVlq2bJnkeHxkZCR9+vRhzpw5SR576tSpNGnShCJFiljcv2bNGu7fv0/btm3ZsGED9evXB+Dzzz/n888/Z9SoUUyePJnhw4fb9JjSS8wXnzrLxXo37t9g8B+DmbF7Bl1e6MK0Zgk/jaeW0yb0pHrSaalTp07MmTOHCxcu0LFjR4ttbO2hv/jii+zevZtr165ZTMYQ9aVjUg4cOEDevHkT/aKsQ4cOdOjQAYgaQ58zZw5JlSeO/3Hemo/3lh6HNT30/fv306lTJ1atWmXxDTJG586dKVGiBL17906wb/78+UyZMuWRbUOGDGHIkCEAvP3225QoUSLZxxBXYs9BUj30V199lYMHD1KrVi0ALly4QPPmzVm2bBn+/v6xbf/++2+2bNnC1KlTuXPnDg8fPiRXrlx8+eWXsW1y5MhB8+bNWbp0aWxCj/H222/TtGlTp03oEJXUNYEnT0SYf3A+fdb04fK9y/Su3JvhtdLo7yoiDrm88MILEt/hw4cTbEtvDx48kJIlS0rx4sUlPDw81cd77733ZMGCBfLbb79J5cqV5datWzYfY8eOHeLr6yshISHy/PPPy4kTJ5JsX7NmTTl58mSi+0+ePCmA/PXXXyIi0qlTJxkzZoyIiAwaNEgWLVpkt8dx+vRpee6552Tbtm0J9tWpU0eCg4NFRGTIkCHSokULiYiISNDu6NGj8swzz0hkZGTstvDwcLly5YqIiOzbt0/KlSsnYWFhVsUkIrJx40bJkSOHnDhxQiIiIqRBgwaycOFCq28fo2bNmrJr1y4REQkODpY6deokaDN79mzp3r27iIjcvn1bzp07JyIiYWFh0qpVK5k0aZKIiBw7diz2NhMnTpQ33njDplic4fVjT4v/CZaqo9ZLsYHLpeqo9bL4n2BHh2SzY1eOSf259YVPkRdnvij/nPsn1ccEAiWRvKpfisaTLVs2ateuTatWrWI/3tvDm2++yQcffEDz5s0JDbV+JsCDBw/44IMPmDVrFoUKFWLs2LF07Ngx1dMby5Qpww8//ICPjw/Xrl2ja9euQNQngaefftpuj2PEiBFcvXqVbt264efnF9uLjYyM5Pjx4zz55JMEBwfz+eefc/jwYSpWrIifnx/fffdd7DF++eUXWrdu/UiPOiwsjBo1alC2bFk6d+7MTz/9FDvkMmzYMJYtWwbAsmXLGDZsmMXYqlSpwqBBgyhfvjzFixfn9ddfT/bxJOX8+fPJDvvcvXuX5s2b4+Pjg6+vLwUKFIid2RQTi4+PD2vXro0dQgsMDKRTp06xx/Dz80tVnK4gZp57yI1QhP+b575kT4ijQ7PKg/AHjNg8Au9p3uwI2cGUJlP4+/2/qVCwQprer0ltYkgpf39/iT9/98iRI5QpU8Yh8cSIjIykYsWKLFiwwOaP8BlBw4YNWbNmTZrfz8GDB5k1axbjxo1L8/tKL5MnT6Zo0aI0b97cIffvDK8fe6n25QZCLEyB9PL0YNugOhZv4yxnrm44uYGuK7py7OoxWpdvzbgG4yj4eEG7Hd8Ys1tE/C3tc9oxdEc4fPgwzZo14/XXX3fLZA6kSzIHKF++fIZK5sAjJw+p1LF1nrsznLl66e4l+q3tx0/7f+LZJ55lddvVNHy+YbrcdwxN6HGULVuWEydOODoMpdxeIU8Piz30xOa5J3Xmalon9EiJ5Pt/vmfgHwO58/AO/6vxPz6u8TEeWdN/Tn6yY+jGmFLGmL1xLreMMb3jtTHGmInGmOPGmP3GmIppF7JSKqMb0LAUHlkf/Q4rqXnujjpz9cDFA1SfVZ3Oyzvj85QP+7vuZ2SdkQ5J5mBFD11EggA/AGNMZiAEiD+xuTFQIvryEjAt+qdSStnM1nnutvboU+vuw7sM3zyccX+P4wmPJ/jhtR94x+cdh5/da+uQS13gPxGJv+r0q8Dc6Ck1240xnsaYgiJy3i5RKqXcji3z3NPzzNXfg36nx6oenLl5hk4VOvFlvS/J+1ji51ekJ1sTemvgFwvbvYCzcX4Pjt72SEI3xnQGOgMULVrUxrtWSinL0uPM1bM3z9JrdS8WH11Mufzl2NJhC9WLVrfb8e3B6oRujMkGNAcGW9ptYVuC+ZAiMhOYCVHTFq29b6WUSk5anbkaHhnOxB0TGbZxGJESyZd1v6RPlT5ky5zN7veVWracWNQY+EdELlrYFwzELVpRGHDeYs521KlTJw4fPpxkmyVLliTbJqZdSkqmzpkzJ0W1s6dPnx5bxTEtnTp1ip9//jlFt61atWqybVq3bs2///6bouMrlZQdwTvwn+lPv7X9qFmsJoe6HWJg9YFOmcwB60/9B+YDHRLZ1xRYRVRPvTKwM7nj2ePUf1c5NTjmtPnkVKlSRS5fvmzz8eOefh6fPcoXpNbGjRuladOmFvfZcrp+YjZt2iSdOnVK9XFcXUY79d+Rrodel67Lu4r51EihsYVk4aGFj5SecCRSe+q/MeYxoD6wKM62AGNMzGoMK4ETwHHgW6CbXd5tkpAWpwafOnWK0qVLW6wTvn79eipUqIC3tzcdO3bkwYMHQFQhrJgzXnPlysWQIUPw9fWlcuXKXLx4kb/++otly5YxYMAA/Pz8+O+//5g4cSJly5bFx8eH1q1bA3Ds2DGyZ89Ovnz5AOtroC9cuJDAwEDatm2Ln58foaGhFCtWjBEjRlC9enUWLFjAt99+y4svvoivry9vvPFG7GP69NNPY8u/1qpVi4EDB1KpUiVKliyZbEVJW2rHDxo0iC1btuDn58f48eOZM2cOb775Jq+88goNGjTgzp071K1bl4oVK+Lt7c3SpUtjb5srVy4gaoWhWrVq0bJlS0qXLk3btm1jyx/UqFGDP/74g/Dw8CRjVio5IsIvB36h9OTSzNg9g54v9eRI9yO8UfYNh89gsUpimT6tL6ntoVcdtV6eGbg8waXqqPVWHyO+mKJVW7duFRGRDh06yOjRoyU0NFQKFy4sQUFBIiLyzjvvyPjx40Xk0d4xIMuWLRMRkQEDBsjIkSNFJGEPvWDBgnL//n0REbl+/bqIiMyaNUv69u0b2+bChQvy3HPPyZ9//iklSpSQq1evJhp3/B76M888I1999VXs7zFFrESiimBNnDhRREQ++eQTGT16dOwxYu5/xYoVUrdu3WSfqwoVKoiISEREhDz77LOP3E9c8Xvos2fPFi8vr9jHFBYWJjdv3hQRkcuXL8tzzz0X2xvKmTNn7DFy584tZ8+elYiICKlcubJs2bIl9pj16tWTwMDAJGPO6LSHnjr/Xv03tpCW/0x/2X1ut6NDsoiMWJwrrU4kiF8nfOvWrQQFBVG8eHFKliwJwHvvvceff/6Z4LbZsmWLXafyhRdeSHQZOB8fH9q2bftIQanz58+TP3/+2DZxa6CPHTs20bK7iXnrrbdirx88eJAaNWrg7e3NvHnzOHTokMXbxCzvllTsMeLWjl+7dm2iteMTU79+/djHJCJ8/PHH+Pj4UK9ePUJCQrh4MeFXNZUqVaJw4cJkypQJPz+/R2IsUKCAU6/BqZzXg/AHjNw8kvJTy7MjZAeTG09m+/vbqVjQ9c6PdNlT/9PqRAJLNbLFygJmWbNmjb195syZEx0CWLFiBX/++SfLli1j5MiRHDp0CA8PD27evPlIu+RqoCclZ86csdfbt2/PkiVL8PX1Zc6cOWzatMnibbJnz55s7HFZUzvemvjmzZvH5cuX2b17N1mzZqVYsWLcv38/0fgsxXj//n08PHT5M2WbjSc30nVFV4KuBvFWubcY13BcmqwklF5ctodu66nB1jpz5gx///03EFW2tXr16pQuXZpTp05x/PhxAH788ccEC/8m5fHHH49dECMyMpKzZ89Su3Ztvv76a27cuMGdO3coU6ZM7PEhanm0VatWsWfPHsaMGcPJkyetOr4lt2/fpmDBgoSFhTFv3jyr44aoRazr1q1rcd/rr7/O6tWr2bVrFw0bJl6EKLn4bt68SYECBciaNSsbN27k9On4560l79ixY5QrV87m2yn3dOnuJd5d/C515tYhLDKMVW1XMb/lfJdO5uDCCf21Cl6MauGNl6cHhqiymqNaeKd6HqqlOuE5cuRg9uzZvPnmm3h7e5MpU6bYGtbWaN26NaNHj6ZChQr8+++/tGvXDm9vbypUqECfPn3w9PTk5ZdfZs+ePYiIzTXQ27dvT0BAQOyXovHFLB1Xv359SpcubdPzkVSNb2trx/v4+JAlSxZ8fX0tLlnXtm1bAgMD8ff3Z968eTbHePHiRTw8PChY0H4lSlXGFCmRfLv7W0pPLs38g/MZUmMIB7sepNHzjRwdmn0kNrie1hdnXLHo5MmTUq5cOYfdf8+ePWXdunUOu39LJk2aJEuXLrW4LyIiQnx9fR9ZaccRxo0bJ999951DY3AGjn79OLv9F/ZL1e+rCp8iL89+WQ5fcs3niyS+FHXZMfSM6OOPP2bHjh2ODuMRidX4dqba8Z6enrzzzjsOjUE5r7sP7zJi8wjGbR9Hnux5mPPqHN71fdc1piHaSFcsciHdu3dn27Ztj2zr1atX7OLQjnbgwIEEiTV79uxO9yaVUenrJ6Hlx5bTY2UPTt88TUe/jnxd/2unKaSVUi61YpGIZMh3TnuIv+q9s/H29mbv3r2ODsMtOapj5qyCbwXTc1VPFh9dTNn8Zfmz/Z/UeKaGo8NKc06V0HPkyMHVq1fJmzevJnWlrCQiXL16lRw5cjg6FIcLjwxn0o5JDNs0jIjICEbVHUXfKn2dt/aKnTlVQi9cuDDBwcFcvnzZ0aEo5VJy5MhB4cKFHR2GQ+0M2UmX5V3Ye2EvjZ9vzJQmUyj+RHFHh5WunCqhZ82aleLF3esPoJRKnRv3bzBk/RCmBU6j4OMFWfDmAt4o4yK1V+zMqRK6UkpZS0T49dCv9FnTh0t3L/FhpQ8ZWWckubPndnRoDqMJXSnlco5fO073ld1Z+99a/Av5s7zNcl4o9IKjw3I4TehKKZfxIPwBX2/7ms+3fE62zNmY1HgSXf27kjlT4mcquxNN6EoplxC3kFarcq0Y33C8y9desTdN6Eopp3b57mX6r+vP3H1zKe5ZnFVtV2Wc2it2pgldKeWUIiWSWXtm8dG6j7jz8A4fV/+YIS8P4bGsjzk6NKelCV0p5XQOXjpIwPIAtp3dRo2iNZjebDpl85d1dFhOz9o1RT2NMQuNMUeNMUeMMVXi7a9ljLlpjNkbfRmWNuEqpTKyuw/vMnDdQCrMqMDRK0eZ1XwWm9tv1mRuJWt76BOA1SLS0hiTDbD0mWeLiDSzX2hKKXey4tgKuq/sHltI66v6X5HvsXyODsulJJvQjTG5gZeB9gAi8hB4mLZhKaXcRfCtYHqt7sWiI4sok68Mm9tv5uVnXnZ0WC7JmiGXZ4HLwGxjzB5jzHfGmJwW2lUxxuwzxqwyxlhcC8wY09kYE2iMCdR6LUq5t/DIcL7Z/g1lppRh5b8r+aLOF+wN2KvJPBWsSehZgIrANBGpANwFBsVr8w/wjIj4ApOAJZYOJCIzRcRfRPzjrnCvlHIvO0N2UunbSvRZ04caRWtwqNshBtcY7DZVEdOKNQk9GAgWkZhVChYSleBjicgtEbkTfX0lkNUYo4NfSqlH3Lx/kx4re1D5u8pcuHOB31r+xoq3V/DsE886OrQMIdkxdBG5YIw5a4wpJSJBQF3gcNw2xpingYsiIsaYSkS9UVxNk4iVUi4nfiGtHpV68Fmdz9y6kFZasHaWy4fAvOgZLieADsaYAAARmQ60BLoaY8KBUKC16BIqSingv2v/0W1lN9b+t5YXCr7A721+x7+QxRXUVCpZldBFZC8Q/y8wPc7+ycBkO8allHJxD8IfMPqv0Xy+5XOyZsrKxEYT6fZiNy2klYb0TFGllN1tOrWJriu6cvTKUd4s+ybjG47HK7eXo8PK8DShK6Xs5vLdywxYN4Af9v1Acc/irHh7BU1KNHF0WG5DE7pSKtUiJZLZe2bz0R8fcevBLQZXH8z/Xv6fFtJKZ5rQlVKpcujSIQJWBLD1zFZqFK3BtKbTKFfA4rmFKo1pQldKpci9sHuM3DySMX+PIU/2PMxqPov2fu3dcnFmZ6EJXSllsxXHVtBjVQ9O3ThFB78OfF3/ay2k5QQ0oSulrBZ8K5jeq3vz/478Py2k5YQ0oSulkhUeGc6UnVP438b/ER4Zzhd1vqBf1X5ae8XJaEJXSiVpV8guAlYE8M/5f2j0fCOmNJmitVeclCZ0pZRFN+/f5H8b/seUXVN4OtfT/NbyN1qWbalfejoxTehKqUeICAsOL6D36t5cuHOBHpV6MLL2SPLkyOPo0FQyNKErpWL9d+0/eqzqwerjq6lYsCLL2izTQlouRBO6UoqHEQ8ZvW00n235jKyZsjKh0QS6v9hdC2m5GE3oSrm5zac203VFV45cOULLsi35puE3WkjLRWlCV8pNXbl3hQHrBjBn7xyKeRZL80JaS/aEMHpNEOduhFLI04MBDUvxWgV947AnTehKWZCRk0+kRDJn7xwGrBuQboW0luwJYfCiA4SGRQAQciOUwYsOAGSY59UZaEJXKp6MnHwOXTpE1xVd2XJmC9WLVmd60+npUkhr9Jqg2OczRmhYBKPXBLn8c+pMrFkkWim3klTycVX3wu4x+I/B+M3w49DlQ3zf/Hs2t9+cblURz90ItWm7ShntoSsVT0ZLPqv+XUX3ld05eeMk7f3aM7r+6HQvpFXI04MQC89fIU+PdI0jo7Oqh26M8TTGLDTGHDXGHDHGVIm33xhjJhpjjhtj9htjKqZNuEqlvcSSjKsln3O3z/Hmgjdp8nMTcmTJwab3NjH71dkOqYo4oGEpPLI+OgXSI2tmBjQsle6xZGTWDrlMAFaLSGnAFzgSb39joET0pTMwzW4RKpXOXD35RERGMHHHREpPLs3yY8v5rPZn7A3YS81iNR0W02sVvBjVwhsvTw8M4OXpwagW3jp+bmfJDrkYY3IDLwPtAUTkIfAwXrNXgbkiIsD26B59QRE5b+d4lUpzMUnGFWe5BJ4LJGB5ALvP76bhcw2Z0mQKzz35nKPDAqKeV1d4Dl2ZNWPozwKXgdnGGF9gN9BLRO7GaeMFnI3ze3D0tkcSujGmM1E9eIoWLZqKsJVKW66WfOIX0vq15a+8WfZNLaTlZqwZcskCVASmiUgF4C4wKF4bS/81kmCDyEwR8RcR//z589scrFLqUSLCgkMLKDOlDFN2TaH7i9050v0Ircq10mTuhqzpoQcDwSKyI/r3hSRM6MFAkTi/FwbOpT48pVRiTlw/QfeV3bWQloqVbA9dRC4AZ40xMd8I1QUOx2u2DHg3erZLZeCmjp8rlTYeRjzkiy1fUG5qObad2caERhPY0WmHJnNl9Tz0D4F5xphswAmggzEmAEBEpgMrgSbAceAe0CENYlXK7f15+k8Clgdw5MoR3ijzBhMaTdBCWiqWVQldRPYC8d/+p8fZL0B3O8allIrjyr0rfLTuI2bvnU0xz2Isb7OcpiWbOjos5WT0TFGlnJiIMHvv7NhCWoOqDWJozaFpWkhLuS5N6Eo5KUcV0lKuSxO6Uk7mXtg9PvvzM0b/NZrc2XPzffPvae/XnkxGa+mppGlCV8qJxC2k9Z7ve4yuP5r8OfWcDWUdTehK2YGtC2LEb/9+zTysCv6ShYcXUjpfaTa+t5FaxWql3wNQGYImdKVSydYFMeK2FyI4cvs3PlgzlyyZI/ms9mf0r9qf7Fmyp+tjUBmDDsoplUq2LogR0/6B+ZcL2ftxPdsMskWWpnyW7xjy8hBN5irFtIeuVCrZuiBG8I0rXM/6E7czryAzecj38CMei6jBtYdae0WljiZ05XKcbQFna1fjEREWHl7IeY9uhMk1Ho9oimfYO2Qip8X2StlKh1yUS4kZfw65EYrwf+PVS/aEOCwmaxbEOHH9BE1+bkKrha0okqcgz0SM58mwgNhk7koLaCjnpQlduRRnXMA5qdV44hbS2npmK980/Iagnnv4pkVLXb1H2Z0OuSiX4qwLOFtaECOpQlqutoCGcg3aQ1cuxRUWcL5y7wodl3ak5pya3Au7x/I2y1nYaqFWRVRpThO6cinOvICziDBrzyxKTS7Fj/t/ZGC1gRzqdkirIqp0o0MuyqU46wLOhy8fJmB5AFvObKFakWpMbzad8gXKOzQm5X40oSuX40zjz/ELaX33ynd0qNBBC2kph9CErlQKaSEt5Ww0oStlo3O3z9F7dW8WHF5AqbyltJCWchpWJXRjzCngNhABhIuIf7z9tYClwMnoTYtEZIT9wlTK8SIiI5i6aypDNgzhYcRDRtYeyYCqA7T2inIatvTQa4vIlST2bxGRZqkNSClntPvcbros78Lu87tp8FwDpjSZwvNPPu/osJR6hA65KJWEWw9uMXTDUCbvmkyBnAWY/8Z8WpVrhTHOXUgrJfVunK1GjrKdtQldgLXGGAFmiMhMC22qGGP2AeeA/iJyKH4DY0xnoDNA0aJFUxiyUmkvppBWr9W9uHDnAt1e7MZndT7DM4eno0NLlq312VN6G+V8rJ1bVU1EKgKNge7GmJfj7f8HeEZEfIFJwBJLBxGRmSLiLyL++fPrbADlnE5eP0nTn5vSamErnsr1FNs7bWdyk8kukcwhZfVunLFGjrKdVQldRM5F/7wELAYqxdt/S0TuRF9fCWQ1xuSzc6xKpamHEQ8ZtWUU5aaWY8uZLYxvOJ5dH+yiklel5G/sRFJS78ZZa+Qo2yQ75GKMyQlkEpHb0dcbACPitXkauCgiYoypRNQbxdW0CFiptLDl9BYCVgRw+PJhWpRpwYRGEyicu7Cjwzqq/6kAABYOSURBVIply/i2tfXZU3sb5Xys6aE/BWyNHh/fCawQkdXGmABjTEB0m5bAweg2E4HWIiJpE7JS9nPl3hXeX/o+L895mbsP7/J7m9/5f63+n9Mlc1tqwKek3o0z18hR1jOOyrv+/v4SGBjokPtWSkT4Yd8P9F/bn5sPbtKvSj+GvjyUnNlyOjq0BKp9ucFi79nL04Ntg+pYvI3Ocsm4jDG7458LFEOnLSq3c+TyEQJWBPDn6T+pWqQq05tOx/spb0eHlaiUjG+npN6NM9XIUSmjCV25jdCwUD7f8jlfb/uaXNly8e0r39KxQkenL6Sl49vKWs79n6yUnaw+vpry08rz+ZbPaePdhqAeQXSq2Mnpkzno+LaynvbQVYZ27vY5+qzpw2+HfqNU3lJseHcDtYvXdnRYNnHWGvDK+WhCVxlSRGQE0wKnMWTDEB6EP3D5Qlo6vq2soQldOZy9Z1f8c/4fuizvQuC5QOo/W5+pTadqIS3lFjShK4eyZw2RWw9uMWzjMCbtnET+x/Lzyxu/8Fa5t5y+kJZS9qIJXTlUUjVErE3oIsKiI4voubon52+fJ8A/gC/qfuEytVeUshdN6MqhUltD5OT1k/RY1YOV/67E72k/Fr+12OVqryhlL5rQlUOldI51WEQYY/8ey4jNI8icKTPjG46nR6UeZMmk/9LKfTn/JFyVoaVkjvXWM1upMKMCg9cPpnGJxhzpfoTelXtrMlduT18ByqFsmWN99d5VBv4xkO/3fE/RPEX5vc3vNCupqx4qFUMTunK45OZYiwhz982l/7r+3Lh/g4+qfsSwmsOcspCWUo6kCV05tSOXj9B1RVc2n97sEoW0lHIkTejKKblqIS2lHEkTunI6a46vodvKbpy4foJ3fN5hTIMxFMhZIMXH0zrfyl1oQldO4/zt8/RZ04dfD/1qt0Jaupq9cif6+VU5XERkBFN2TqH0lNIsObqEEbVGsC9gn12qIupq9sqdaA9dOdQ/5/8hYHkAu87tSpNCWrqavXInViV0Y8wp4DYQAYTHX8/ORFU/mgA0Ae4B7UXkH/uGqixx1fHh2w9uM2zjMCbunJimhbR0tR/lTmzpodcWkSuJ7GsMlIi+vARMi/6p0pArjg+LCIuPLqbnqp6cu30uzQtpDWhY6pHnCHS1H5Vx2WsM/VVgrkTZDngaYwra6dgqEa42Pnzqxile+eUV3vjtDfLnzM/f7//N1KZT07Qq4msVvBjVwhsvTw8M4OXpwagW3k77hqdUaljbQxdgrTFGgBkiMjPefi/gbJzfg6O3nY/byBjTGegMULRo0RQFnNHZMoTiKuPDYRFhjPt7HMM3DyeTycS4BuP48KUP0632iq72o9yFta+oaiJyzhhTAFhnjDkqIn/G2W9p4FMSbIh6I5gJ4O/vn2C/u7N1CMUVxoe3ndlGl+VdOHT5EK+Xfp0JjSZQJE8RR4elVIZk1ZCLiJyL/nkJWAzELzgdDMR9lRYGztkjQHdi6xCKM68Gf/XeVT5Y9gHVZ1fn9sPbLGu9jEVvLdJkrlQaSjahG2NyGmMej7kONAAOxmu2DHjXRKkM3BSR8yib2DqE4ozjwzGFtEpPKc3svbMZUHUAh7sd5pVSrzgsJqXchTVDLk8Bi6Onk2UBfhaR1caYAAARmQ6sJGrK4nGipi12SJtwM7aUDKE40/jw0StH6bqiK5tObaJK4SrMaDZDC2kplY6STegicgLwtbB9epzrAnS3b2jux1Wn2IWGhfLFli/4attX5MqWi5nNZvJ+xfe1kJZS6UzPFHUitiz24CzW/reWbiu68d/1/2jn046xDcamqpCWUirlNKE7GWcaQknK+dvn6bu2L/MPzqdk3pKsf3c9dYrXcXRYSrk1TejKJhGREczYPYPB6wfzIPwBw2sNZ2C1gWTPkt3RoSnl9jShK6vtOb+HgBUB7AzZSb1n6zG1yVRK5C3h6LCUUtE0odvIVYthpUbcQlr5HsvHvBbzaFO+jd0LaSmlUkcTug1csRhWasQvpNXlhS58UfcLnvB4wtGhKaUs0HllNnC1YlipcerGKZrPb84bv71Bvsfy8df7fzGt2TRN5ko5Me2h28BVimGlRlhEGOO3j2f45uEYDGMbjKXnSz3TrZCWUirl9FVqA1cohpUa285sI2BFAAcvHeS10q8xodEEiubRqphKuQodcrGBMxfDSo1roddiC2ndvH+Tpa2XsvitxZrMlXIx2kO3gSueyZkUEeHH/T/Sb20/rodep3+V/nxS6xNyZcvl6NCUUimgCd1GrnImZ3LiFtKqXLgyM5rNwOcpH0eHpZRKBU3obiY0LJRRW0fx5dYvyZktJzOazaBTxU5aSEupDEATuhuJX0hrTP0xPJXrKUeHpZSyE03obuDCnQv0WdOH+QfnU+LJEvzxzh/Ufbauo8NSStmZJvQMLKaQ1sfrPyY0PJRPa37KwOoDyZElh6NDU0qlAU3oGVTcQlp1i9dlatOplMxb0tFhKaXSkCb0DOb2g9t8sukTJuyYQL7H8vHT6z/xtvfbWkhLKTdgdUI3xmQGAoEQEWkWb197YDQQEr1psoh8Z68gVfJEhCVHl9BzdU+CbwXT5YUujKo7SmuvKOVGbOmh9wKOALkT2f+riPRIfUjKVqdvnKbHqh4sP7Ycn6d8+K3lb1QpUsXRYSml0plVk4+NMYWBpoD2up1IWEQYo7eNpuzUsmw4uYEx9ccQ+EGgJnOl3JS1PfRvgI+Ax5No84Yx5mXgGNBHRM6mNjiVuL/O/kWX5V04eOkgzUs1Z1LjSVp7RSk3l2wP3RjTDLgkIruTaPY7UExEfIA/gB8SOVZnY0ygMSbw8uXLKQrY3V0LvUbn3ztTbVY1bt6/yZK3lrC09VJN5kopjIgk3cCYUcA7QDiQg6gx9EUi0i6R9pmBayKSJ6nj+vv7S2BgYIqCdkciwk/7f6Lf2n5cC71G78q9+bTWp1pISyk3Y4zZLSL+lvYlO+QiIoOBwdEHqgX0j5/MjTEFReR89K/NifryVNlJ0JUguq7oysZTG6lcuDLrmq7D92lfR4ellHIyKZ6HbowZAQSKyDKgpzGmOVG9+GtAe/uE597uh9/niy1f8NW2r3gs62NMbzqdD174QAtpKaUsSnbIJa3okEvS1v23jm4ru3H82nHaerdlbIOxWkhLKZW6IReVvi7cuUDfNX355eAvlHiyBOveWUe9Z+s5OiyllAvQhO4kIiWSGYEzGLx+MKHhoXxS8xMGVR+khbSUUlbThO4E9l7YS8DyAHaE7KBO8TpMbTKVUvlce51SpVT604TuQHce3mHYxmFM2DGBvB55+fH1H2nr3VYLaSmlUkQTugOICEuDlvLhqg+1kJZSym40oaez0zdO8+GqD/n92O94F/DWQlpKKbvRhJ5OwiLC+Gb7N3y6+VMARtcfTa+XepE1c1bHBqaUyjA0oaeDv87+RcDyAA5cOqCFtJRSaUYTehq6FnqNwX8MZuY/MymSuwhL3lrCq6VfdXRYSqkMShN6GhAR5h2YR981fbkWeo2+lfsyvPZwLaSllEpTmtDtLOhKEN1WdmPDyQ285PUSg1/8iYXbs+C9cTOFPD0Y0LAUr1XwcnSYSqkMSBO6ndwPv8+oLaP4ctuXeGTxYFrTaRTI1JQhiw8RGhYKQMiNUAYvOgCgSV0pZXea0O3gjxN/0HVFV45fO87b3m8ztsFYns71NNW+3EBoWMQjbUPDIhi9JihDJ/Qle0IYvSaIczdC9VOJUulIE3oqXLhzgX5r+/HzgZ95/snnExTSOncj1OLtEtueESzZE8LgRQdi38j0U4lS6cftE3pKepOREsnM3TMZ9MegJAtpFfL0IMRC8i7k6WHXx+BMRq8JcstPJUo5A7dO6CnpTe67sI8uy7uwI2QHtYvVZlrTaYkW0hrQsNQjxwfwyJqZAQ1dq/CWLW967vipRCln4dZL3yTVm4zvzsM79F/bnxdmvsCJ6yf48fUfWf/u+iSrIr5WwYtRLbzx8vTAAF6eHoxq4e1SPdWYN72QG6EI//emt2RPiMX2iX36yMifSpRyFm7dQ7e2N7nk6JLYQlqdK3ZmVL1RPOnxpFX38VoFL5dK4PHZOoSSUT6VKOWK3DqhJzfGffrGaXqu7smyoGV4F/Dm15a/UrVI1fQO06FsHUKJSfI6y0Wp9Gd1QjfGZAYCgRARaRZvX3ZgLvACcBV4S0RO2THONJFYb7JP/WcZ89cYPtn0CQBf1/ua3pV7u2UhrZR8sevqn0qUclW29NB7AUeA3Bb2vQ9cF5HnjTGtga+At+wQX5qy1Jt85cU7jNz1Kvsv7ueVkq8wqfEknvF8xsGROo4OoSjlOqxK6MaYwkBT4HOgr4UmrwKfRl9fCEw2xhgREXsEmZZiepPXQ68zeP1gPt46E6/cXix+azGvlnrV7VcP0iEUpVyHtT30b4CPgMcT2e8FnAUQkXBjzE0gL3AlbiNjTGegM0DRos5RPlZE+PnAz/Rd25er967Sp3IfLaQVjw6hKOUakk3oxphmwCUR2W2MqZVYMwvbEvTORWQmMBPA39/f4b33Y1eP0W1FN9afXE8lr0qsabcGv6f9HB2WUkqliDU99GpAc2NMEyAHkNsY85OItIvTJhgoAgQbY7IAeYBrdo/WTu6H3+fLrV8yausoPLJ4MLXJVDq/0JnMmTI7OjSllEqxZBO6iAwGBgNE99D7x0vmAMuA94C/gZbABmcdP19/Yj1dV3Tl32v/0qZ8G8Y1HMfTuZ52dFhKKZVqKZ6HbowZAQSKyDLge+BHY8xxonrmre0Un91cvHORfmv7Me/APJ5/8nnWtltL/efqOzospZSyG5sSuohsAjZFXx8WZ/t94E17BmYvkRLJt7u/ZdD6QdwLu8ewl4cxuMbgBIW0lFLK1WXoM0X3X9xPl+Vd2B68ndrFajO16VRK5yvt6LCUUipNZMiEfufhHYZvGs747eN50uNJ5r42l3Y+7dx+TrlSKmPLcAl9WdAyeqzswdlbZ/mg4gd8We9LqwtpKaWUK8swCf3MzTP0XNWTpUFLKV+gPPNbzne7QlpKKffm8gk9PDKcCdsn8MmmT4iUSL6q9xV9Kvdxy0JaSin35tIJfXvwdgKWB7Dv4j6alWzGpMaTKOZZzNFhKaWUQ7hkQr8eep2P13/MjN0zKPR4IRa1WsRrpV/TLz2VUm7N5RL6Hyf+oO2itly5d4XelXszvNZwHs+eWM0wpZRyHy6X0L0e96Jk3pKsbruaCgUrODocpZRyGi6X0MvkL8OWDlscHYZLW7InROubK5UBuVxCV6mzZE/IIysQhdwIZfCiAwCa1JVycZkcHYBKX6PXBD2ynBxAaFgEo9cEOSgipZS9aEJ3M+csLPic1HallOvQhO5mCnl62LRdKeU6NKG7mQENS+GR9dGVmTyyZmZAw1IOikgpZS/6paibifniU2e5KJXxaEJ3Q69V8NIErlQGpEMuSimVQWhCV0qpDCLZhG6MyWGM2WmM2WeMOWSMGW6hTXtjzGVjzN7oS6e0CVcppVRirBlDfwDUEZE7xpiswFZjzCoR2R6v3a8i0sP+ISqllLJGsgldRAS4E/1r1uiLpGVQSimlbGfVGLoxJrMxZi9wCVgnIjssNHvDGLPfGLPQGFMkkeN0NsYEGmMCL1++nIqwlVJKxWeiOuBWNjbGE1gMfCgiB+NszwvcEZEHxpgAoJWI1EnmWJeB0ykLO03kA644OogkOHt84PwxOnt8oDHag7PHB6mL8RkRyW9ph00JHcAY8wlwV0TGJLI/M3BNRPLYHKYDGWMCRcTf0XEkxtnjA+eP0dnjA43RHpw9Pki7GK2Z5ZI/umeOMcYDqAccjdemYJxfmwNH7BmkUkqp5Fkzy6Ug8EN0zzsT8JuILDfGjAACRWQZ0NMY0xwIB64B7dMqYKWUUpZZM8tlP5BgrTcRGRbn+mBgsH1DS3czHR1AMpw9PnD+GJ09PtAY7cHZ44M0itHmMXSllFLOSU/9V0qpDEITulJKZRBum9CNMU8aY9YZY/6N/vmEhTZ+xpi/o2vY7DfGvJUOcTUyxgQZY44bYwZZ2J/dGPNr9P4dxphiaR1TCmLsa4w5HP2crTfGPONM8cVp19IYI8aYdJ/iZk2MxphW0c/jIWPMz84UnzGmqDFmozFmT/TfuUk6xzfLGHPJGHMwkf3GGDMxOv79xpiK6RmflTG2jY5tvzHmL2OMb6rvVETc8gJ8DQyKvj4I+MpCm5JAiejrhYDzgGcaxpQZ+A94FsgG7APKxmvTDZgefb01UTV00vN5sybG2sBj0de7pmeM1sQX3e5x4E9gO+DvhM9hCWAP8ET07wWcLL6ZQNfo62WBU+n8HL4MVAQOJrK/CbAKMEBlYEd6xmdljFXj/H0b2yNGt+2hA68CP0Rf/wF4LX4DETkmIv9GXz9HVOkDi2do2Ukl4LiInBCRh8D86Djjihv3QqCuMcakYUw2xygiG0XkXvSv24HCzhRftJFEvanfT8fYYlgT4wfAFBG5DiAil5wsPgFyR1/PA5xLx/gQkT+JmiKdmFeBuRJlO+AZ73yZNJdcjCLyV8zfFzu9Ttw5oT8lIucBon8WSKqxMaYSUb2V/9IwJi/gbJzfg6O3WWwjIuHATSBvGsYUnzUxxvU+UT2l9JJsfMaYCkAREVmejnHFZc1zWBIoaYzZZozZboxplG7RWRffp0A7Y0wwsBL4MH1Cs5qt/6eOZpfXSYZegs4Y8wfwtIVdQ2w8TkHgR+A9EYm0R2yJ3ZWFbfHnlVrTJi1Zff/GmHaAP1AzTSOKd7cWtsXGZ4zJBIzHsSe/WfMcZiFq2KUWUT23LcaY8iJyI41jA+viawPMEZGxxpgqwI/R8aXl68MWjn6dWM0YU5uohF49tcfK0AldROolts8Yc9EYU1BEzkcnbIsfaY0xuYEVwP8kYQ14ewsG4laqLEzCj7IxbYKNMVmI+rib1EdPe7MmRowx9Yh646wpIg/SKTZIPr7HgfLApuiRqqeBZcaY5iIS6CQxxrTZLiJhwEljTBBRCX6Xk8T3PtAIQET+NsbkIKrgVHoODSXFqv9TRzPG+ADfAY1F5Gpqj+fOQy7LgPeir78HLI3fwBiTjajqknNFZEE6xLQLKGGMKR59362j44wrbtwtgQ0S/a1KOkk2xughjRlA83Qe+002PhG5KSL5RKSYiBQjauwyPZN5sjFGW0LUl8sYY/IRNQRzwoniOwPUjY6vDJADcKaa2MuAd6Nnu1QGbsYMsToLY0xRYBHwjogcs8tB0/ubX2e5EDXuvB74N/rnk9Hb/YHvoq+3A8KAvXEufmkcVxPgGFFj9UOit40gKulA1AtnAXAc2Ak864DnLrkY/wAuxnnOljlTfPHabiKdZ7lY+RwaYBxwGDgAtHay+MoC24iaAbMXaJDO8f1C1KyzMKJ64+8DAUBAnOdvSnT8Bxz0N04uxu+A63FeJ4GpvU899V8ppTIIdx5yUUqpDEUTulJKZRCa0JVSKoPQhK6UUhmEJnSllMogNKErpVQGoQldKaUyiP8PeFJJ+gMbFooAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "space = np.linspace(-0.3, 1.2, 10)\n",
    "plt.scatter(X_train, y_train, label = 'points(x_train, y_train)')\n",
    "plt.plot(space, space * ai[0] + ai[1], 'g', label = 'y = k * x + b, k=2,279.. b=4,433..')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Например, если мы приближаем функцию одной переменной по значениям в  𝑛  точках, то наилучшей с точки зрения этой ошибки моделью будет многочлен  (𝑛−1) -й степени, для которого эта ошибка будет равна нулю. Получается для тренировочных точек мы максимально приблизили функцию (n-1 = 20 степени многочлен), но для любых других точек (тестовых) произойдет большое отклонение, поэтому проанализировав среднеквадратические ошибки (я их высчитываю ниже), становится видно, что наименьшая у многочлена степенью 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import copy\n",
    "\n",
    "b = np.ones(n)\n",
    "\n",
    "#многочлены 1-ой степени для train и test \n",
    "Xtra = np.column_stack((X_train, b))\n",
    "Xtes = np.column_stack((X_test, b))\n",
    "\n",
    "def stepen(matr, n):\n",
    "    matr1 = copy.copy(matr);\n",
    "    for i in range(len(matr)):\n",
    "        matr1[i] = matr1[i] ** n;\n",
    "    return matr1;\n",
    "\n",
    "\n",
    "def polynom(matr, n, base):\n",
    "    count = 2;\n",
    "    while count <= n:\n",
    "        matr = np.column_stack((stepen(base, count), matr));\n",
    "        count += 1;\n",
    "    return matr;\n",
    "\n",
    "#polynom3test = polynom(Xtes, 3, X_test)\n",
    "polynom20train = polynom(Xtra, 21, X_train)\n",
    "\n",
    "#обучение\n",
    "#a_20 = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynom20train),polynom20train)),np.transpose(polynom20train)),y_train)\n",
    "a_20 = np.linalg.lstsq(polynom20train,y_train, rcond = None)[0]\n",
    "# воспользовался функцией, т.к при подсчете по формуле график с определенного x начинает дико скакать, предполагаю, что дело в Pythone\n",
    "\n",
    "y_20 = np.dot(polynom20train, a_20)\n",
    "\n",
    "plt.figure(figsize=(10, 10))\n",
    "plt.plot(X_train, y_20, 'g', label='polynom ** 20')\n",
    "plt.scatter(X_train, y_train, label = 'points(x_train, y_train)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для $k = 1,2,3,\\ldots,10$ найдите многочлен $\\hat{f}_k$ степени $k$, наилучшим образом приближающий неизвестную зависимость. Для каждого из них найдите среднеквадратическую ошибку на обучающих данных и на тестовых данных: $\\frac1{n}\\sum_{i=1}^n\\left( \\hat{f}_k(x_i) - y_i \\right)^2$ (в первом случае сумма ведётся по парам $(x_i, y_i)$ из обучающих данных, а во втором - по парам из тестовых данных).\n",
    "\n",
    "Для $k = 1,2,3,4,6$ напечатайте коэффициенты полученных многочленов и нарисуйте их графики на одном чертеже вместе с точками $(x_i, y_i)$ (возможно, график стоит сделать побольше; это делается командой `plt.figure(figsize=(width, height))`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k =  1 , среднеквадратическая ошибка для train -  0.29689663326251964 среднеквадратическая ошибка для test -  0.4351202004048878\n",
      "k =  2 , среднеквадратическая ошибка для train -  0.2696989158766912 среднеквадратическая ошибка для test -  0.3564762887831171\n",
      "k =  3 , среднеквадратическая ошибка для train -  0.26949718714796084 среднеквадратическая ошибка для test -  0.3553464571518064\n",
      "k =  4 , среднеквадратическая ошибка для train -  0.26106653305792754 среднеквадратическая ошибка для test -  0.4417270189288398\n",
      "k =  5 , среднеквадратическая ошибка для train -  0.24998504648317538 среднеквадратическая ошибка для test -  0.5579732021444157\n",
      "k =  6 , среднеквадратическая ошибка для train -  0.1882934898837026 среднеквадратическая ошибка для test -  2.5816929321010735\n",
      "k =  7 , среднеквадратическая ошибка для train -  0.1853962115329447 среднеквадратическая ошибка для test -  2.5157828724622058\n",
      "k =  8 , среднеквадратическая ошибка для train -  0.15905556579093486 среднеквадратическая ошибка для test -  4.357288560770745\n",
      "k =  9 , среднеквадратическая ошибка для train -  0.1584718427921011 среднеквадратическая ошибка для test -  4.776381002475285\n",
      "k =  10 , среднеквадратическая ошибка для train -  0.1531661286676506 среднеквадратическая ошибка для test -  14.631234380166854\n",
      "\n",
      "коэффиценты многочлена степени -  1  для train:  4.433230905064935 2.2791344980519463 \n",
      "\n",
      "коэффиценты многочлена степени -  2  для train:  4.472476503404163 1.1578316883597037 1.401628512115269 \n",
      "\n",
      "коэффиценты многочлена степени -  3  для train:  4.460736355285103 1.0650161052853164 1.8597508372603793 -0.3817686042880051 \n",
      "\n",
      "коэффиценты многочлена степени -  4  для train:  4.341166120399753 1.171802392631754 6.794091784354478 -13.051328119981164 7.9184746973123055 \n",
      "\n",
      "коэффиценты многочлена степени -  5  для train:  4.43129781382227 -0.13059803987126584 3.2747144018572243 21.374796276058774 -51.13148138514835 29.52497804119322 \n",
      "\n",
      "коэффиценты многочлена степени -  6  для train:  4.383795011020893 -4.597179324808662 16.002903990019952 121.25709712169976 -481.5101328572712 581.4532982117421 -229.97013340563262 \n"
     ]
    }
   ],
   "source": [
    "import copy\n",
    "\n",
    "b = np.ones(n)\n",
    "\n",
    "#многочлены 1-ой степени для train и test \n",
    "Xtra = np.column_stack((X_train, b))\n",
    "Xtes = np.column_stack((X_test, b))\n",
    "\n",
    "def stepen(matr, n):\n",
    "    matr1 = copy.copy(matr);\n",
    "    for i in range(len(matr)):\n",
    "        matr1[i] = matr1[i] ** n;\n",
    "    return matr1;\n",
    "\n",
    "\n",
    "def polynom(matr, n, base):\n",
    "    count = 2;\n",
    "    while count <= n:\n",
    "        matr = np.column_stack((stepen(base, count), matr));\n",
    "        count += 1;\n",
    "    return matr;\n",
    "\n",
    "def error(polynTrain, polynTest):\n",
    "    #обучение\n",
    "    ap = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynTrain),polynTrain)),np.transpose(polynTrain)),y_train);\n",
    "    # среднеквадратическая ошибка\n",
    "    answerTrain = ((np.dot(polynTrain, ap) - y_train) ** 2).mean(axis = 0)\n",
    "    answerTest = ((np.dot(polynTest, ap) - y_test) ** 2).mean(axis = 0)\n",
    "    return [answerTrain, answerTest]\n",
    "\n",
    "#напечатую ср-кв. ошибки для многочленов степени от 1 до 10\n",
    "count = 1\n",
    "while count < 11:\n",
    "    temp1 = polynom(Xtra, count, X_train);\n",
    "    temp2 = polynom(Xtes, count, X_test);\n",
    "    Error = error(temp1, temp2)\n",
    "    print(\"k = \", count, \", среднеквадратическая ошибка для train - \", Error[0], \"среднеквадратическая ошибка для test - \", Error[1]);\n",
    "    count += 1;\n",
    "\n",
    "# выведу коэф. многочленов степени от 1 до 6 для train\n",
    "count = 1\n",
    "while count < 7:\n",
    "    temp1 = polynom(Xtra, count, X_train);\n",
    "    ap = np.dot(np.dot(sla.inv(np.dot(np.transpose(temp1),temp1)),np.transpose(temp1)),y_train);\n",
    "    print(\"\\nкоэффиценты многочлена степени - \", count, \" для train: \", end= \" \")\n",
    "    for i in range(count + 1):\n",
    "        print(ap[count - i], end= \" \")\n",
    "    count += 1;\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import copy\n",
    "\n",
    "b = np.ones(n)\n",
    "\n",
    "#многочлены 1-ой степени для train\n",
    "Xtra = np.column_stack((X_train, b))\n",
    "\n",
    "def stepen(matr, n):\n",
    "    matr1 = copy.copy(matr);\n",
    "    for i in range(len(matr)):\n",
    "        matr1[i] = matr1[i] ** n;\n",
    "    return matr1;\n",
    "\n",
    "\n",
    "def polynom(matr, n, base):\n",
    "    count = 2;\n",
    "    while count <= n:\n",
    "        matr = np.column_stack((stepen(base, count), matr));\n",
    "        count += 1;\n",
    "    return matr;\n",
    "\n",
    "polynom1= polynom(Xtra, 1, X_train)\n",
    "polynom2= polynom(Xtra, 2, X_train)\n",
    "polynom3= polynom(Xtra, 3, X_train)\n",
    "polynom4= polynom(Xtra, 4, X_train)\n",
    "polynom5= polynom(Xtra, 5, X_train)\n",
    "polynom6= polynom(Xtra, 6, X_train)\n",
    "\n",
    "#обучение\n",
    "#a_1 = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynom1),polynom1)),np.transpose(polynom1)),y_train)\n",
    "#a_2 = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynom2),polynom2)),np.transpose(polynom2)),y_train)\n",
    "#a_3 = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynom3),polynom3)),np.transpose(polynom3)),y_train)\n",
    "#a_4 = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynom4),polynom4)),np.transpose(polynom4)),y_train)\n",
    "#a_5 = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynom5),polynom5)),np.transpose(polynom5)),y_train)\n",
    "#a_6 = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynom6),polynom6)),np.transpose(polynom6)),y_train)\n",
    "a_1 = np.linalg.lstsq(polynom1,y_train, rcond = None)[0]\n",
    "a_2 = np.linalg.lstsq(polynom2,y_train, rcond = None)[0]\n",
    "a_3 = np.linalg.lstsq(polynom3,y_train, rcond = None)[0]\n",
    "a_4 = np.linalg.lstsq(polynom4,y_train, rcond = None)[0]\n",
    "a_5 = np.linalg.lstsq(polynom5,y_train, rcond = None)[0]\n",
    "a_6 = np.linalg.lstsq(polynom6,y_train, rcond = None)[0]\n",
    "# воспользовался функцией, т.к при подсчете по формуле график с определенного x начинает дико скакать, предполагаю, что дело в Pythone\n",
    "\n",
    "y_1 = np.dot(polynom1, a_1)\n",
    "y_2 = np.dot(polynom2, a_2)\n",
    "y_3 = np.dot(polynom3, a_3)\n",
    "y_4 = np.dot(polynom4, a_4)\n",
    "y_5 = np.dot(polynom5, a_5)\n",
    "y_6 = np.dot(polynom6, a_6)\n",
    "\n",
    "plt.figure(figsize=(15, 15))\n",
    "plt.plot(X_train, y_1, label='polynom ** 1')\n",
    "plt.plot(X_train, y_2, label='polynom ** 2')\n",
    "plt.plot(X_train, y_3, label='polynom ** 3')\n",
    "plt.plot(X_train, y_4, label='polynom ** 4')\n",
    "plt.plot(X_train, y_5, label='polynom ** 5')\n",
    "plt.plot(X_train, y_6, label='polynom ** 6')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Что происходит с ошибкой при росте степени многочлена? Казалось бы, чем больше степень, тем более сложным будет многочлен и тем лучше он будет приближать нашу функцию. Подтверждают ли это ваши наблюдения? Как вам кажется, чем объясняется поведение ошибки на тестовых данных при $k = 10$?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Ответ:\n",
    "При росте степени многочлена среднеквадратические ошибки на обучающих данных уменьшаются, а на тестовых данных увеличиваются. Более того, мы подогнали нашу модель под свои зашумлённые данные, но на любых других данных (тестовых данных) точность, скорее всего, окажется совсем не такой хорошей. Этот эффект называют переобучением; говорят также, что обобщающая способность модели оказалась скверной. Это мы и смогли пронаблюдать на изменениях среднеквадратических ошибок, в частности при k = 10. На тренировочных данных при увелечении степени многочлена улучшается приближенность к нашей функции."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задание 2. Линейная регрессия (4 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Скачайте файлы ``flats_moscow_mod.txt`` и ``flats_moscow_description.txt``. В первом из них содержатся данные о квартирах в Москве. Каждая строка содержит шесть характеристик некоторой квартиры, разделённые знаками табуляции; в первой строке записаны кодовые названия характеристик. Во втором файле приведены краткие описания признаков. Вашей задачей будет построить с помощью метода наименьших квадратов (линейную) зависимость между ценой квартиры и остальными доступными параметрами.\n",
    "\n",
    "С помощью известных вам формул найдите регрессионные коэффициенты. Какой смысл имеют их знаки? Согласуются ли они с вашими представлениями о жизни?\n",
    "\n",
    "Оцените качество приближения, вычислив среднеквадратическую ошибку."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Коэфф. общей площади квартиры = 1.4870528861257892\n",
      "Коэфф. жилой площади квартиры = 1.6562890012269262\n",
      "Коэфф. площади кухни = 1.8192049792748441\n",
      "Коэфф. расстояния от центра = -3.3271540562740864\n",
      "Коэфф. расстояния до метро = -1.3156886037015956\n",
      "Свободный коэффициент = -26.789269634185132\n",
      "\n",
      "среднеквадратическая ошибка -  924.0090032083978\n"
     ]
    }
   ],
   "source": [
    "flats_mod = numpy.loadtxt('/Users/user/flats_moscow_mod.txt', delimiter='\\t', skiprows = 1)\n",
    "#flats_description = numpy.loadtxt('/Users/user/flats_moscow_description.txt', delimiter='\\t',)\n",
    "price = flats_mod[:,0]\n",
    "matriza = flats_mod[:,1:]\n",
    "one = np.ones(len(price))\n",
    "matriza = np.column_stack((matriza, one))\n",
    "#обучение ->\n",
    "af = np.dot(np.dot(sla.inv(np.dot(np.transpose(matriza),matriza)),np.transpose(matriza)),price);\n",
    "#среднеквадратическая ошибка ->\n",
    "averror = ((np.dot(matriza, af) - price) ** 2).mean(axis = 0)\n",
    "#вывод ->\n",
    "print('Коэфф. общей площади квартиры =', af[0])\n",
    "print('Коэфф. жилой площади квартиры =', af[1])\n",
    "print('Коэфф. площади кухни =', af[2])\n",
    "print('Коэфф. расстояния от центра =', af[3])\n",
    "print('Коэфф. расстояния до метро =', af[4])\n",
    "print('Свободный коэффициент =', af[5])\n",
    "print('\\nсреднеквадратическая ошибка - ', averror)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Отрицательные знаки у коэффициентов расстояния от центра и до метро обусловлены тем, что стоимость квартиры уманьшается по мере удаленности квартиры от центра и от метро. Это согласуется с моим представлением о жизни т.к это вполне логично, расстояние от центра, а особенно для метро играет большую роль скорости и удобстве, особенно когда надо ехать к первой паре в универ. Площадь квартиры тоже немаловажная роль в комфорте проживания, как и площаль кухни."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Усложнение модели"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Конечно, никто не гарантирует, что объясняемая переменная (цена квартиры) зависит от остальных характеристик именно линейно. Зависимость может быть, например, квадратичной или логарифмической; больше того, могут быть важны не только отдельные признаки, но и их комбинации. Это можно учитывать, добавляя в качестве дополнительных признаков разные функции от уже имеющихся характеристик: их квадраты, логарифмы, попарные произведения.\n",
    "\n",
    "В этом задании вам нужно постараться улучшить качество модели, добавляя дополнительные признаки, являющиеся функциями от уже имеющихся. Но будьте осторожны: чрезмерное усложнение модели будет приводить к переобучению. \n",
    "\n",
    "**Сравнение моделей**\n",
    "\n",
    "Когда вы построите новую модель, вам захочется понять, лучше она или хуже, чем изначальная. Проверять это на той же выборке, на которой вы обучались, бессмысленно и даже вредно (вспомните пример с многочленами: как прекрасно падала ошибка на обучающей выборке с ростом степени!). Поэтому вам нужно будет разделить выборку на обучающую и тестовую. Делать это лучше случайным образом (ведь вы не знаете, как создатели датасета упорядочили объекты); рекомендуем вам для этого функцию `sklearn.model_selection.train_test_split`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OLD everage error -  935.7887456487842 NEW everage error -  742.9441895524302\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nfrom sklearn.model_selection import train_test_split\\nfor i in range(1, 11):\\n    X_train, X_test, Y_train, Y_test = train_test_split(X, price, test_size=0.33)\\n    # обучение\\n    aNew = np.dot(np.dot(sla.inv(np.dot(np.transpose(XNew),XNew)),np.transpose(XNew)),Y_train);\\n    aOld = np.dot(np.dot(sla.inv(np.dot(np.transpose(X),X)),np.transpose(X)),Y_train);\\n    aNew = np.linalg.lstsq(XNew,Y_train, rcond = None)[0]\\n    aOld = np.linalg.lstsq(X,Y_train, rcond = None)[0]\\n    errorNew = error(XNew)\\n    errorOld = error(X)\\n    print(\"OLD everage error - \", errorOld, \"NEW everage error - \", errorNew)\\n    #print(len(XNew[0]),len(Y_train))\\n'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import copy\n",
    "\n",
    "# т.к степеннын функции делают исходную ф-ю более гибкой(что позволяет обхватывать больше точек), то я добавлю несколько\n",
    "# таких ф-й\n",
    "\n",
    "def stepen(matr, n):\n",
    "    matr1 = copy.copy(matr);\n",
    "    for i in range(len(matr)):\n",
    "        matr1[i] = matr1[i] ** n;\n",
    "    return matr1;\n",
    "\n",
    "def multiplications(object1, object2):\n",
    "    Object1 = copy.copy(object1);\n",
    "    Object2 = copy.copy(object2);\n",
    "    for i in range(len(Object1)):\n",
    "        Object1[i] = Object1[i] * Object2[i]\n",
    "    return Object1\n",
    "\n",
    "def update_matr(matriza):\n",
    "    matr = copy.copy(matriza);\n",
    "    tempLivesp = copy.copy(livesp)\n",
    "    tempMetrdist = copy.copy(metrdist)\n",
    "    tempTotsp = copy.copy(totsp)\n",
    "    tempDist = copy.copy(dist)\n",
    "    tempKitsp = copy.copy(kitsp)\n",
    "\n",
    "    matr = np.column_stack((matr, stepen(tempLivesp, 3)))\n",
    "    matr = np.column_stack((matr, stepen(tempMetrdist, 2)))\n",
    "    matr = np.column_stack((matr, multiplications(tempTotsp, tempDist)))\n",
    "    matr = np.column_stack((matr, multiplications(tempTotsp, tempKitsp)))\n",
    "    matr = np.column_stack((matr, multiplications(tempMetrdist, tempDist)))\n",
    "    #----\n",
    "    return matr;\n",
    "\n",
    "def error(polynTrain):\n",
    "    #обучение\n",
    "    ap = np.dot(np.dot(sla.inv(np.dot(np.transpose(polynTrain),polynTrain)),np.transpose(polynTrain)),y_train);\n",
    "    # среднеквадратическая ошибка\n",
    "    answerTrain = ((np.dot(polynTrain, ap) - y_train) ** 2).mean(axis = 0)\n",
    "    return answerTrain\n",
    "\n",
    "price = flats_mod[:,0]\n",
    "totsp = flats_mod[:,1]\n",
    "livesp = flats_mod[:,2]\n",
    "kitsp = flats_mod[:,3]\n",
    "dist = flats_mod[:,4]\n",
    "metrdist = flats_mod[:,5]\n",
    "one = np.ones(len(price))\n",
    "\n",
    "# не модифицированная\n",
    "X = flats_mod[:,1:]\n",
    "# модифицированная\n",
    "XNew = update_matr(X)\n",
    "afnew = np.dot(np.dot(sla.inv(np.dot(np.transpose(XNew),XNew)),np.transpose(XNew)),price);\n",
    "afold = np.dot(np.dot(sla.inv(np.dot(np.transpose(X),X)),np.transpose(X)),price);\n",
    "\n",
    "\n",
    "averrornew = ((np.dot(XNew, afnew) - price) ** 2).mean(axis = 0)\n",
    "averrorold = ((np.dot(X, afold) - price) ** 2).mean(axis = 0)\n",
    "\n",
    "\n",
    "print('OLD everage error - ', averrorold, \"NEW everage error - \", averrornew)\n",
    "\n",
    "\n",
    "#print(len(XNew[0]))\n",
    "#print(len(y_train))\n",
    "\n",
    "# пытаюсь пофиксить проблему с размерами, не могу понять что не так\n",
    "'''\n",
    "from sklearn.model_selection import train_test_split\n",
    "for i in range(1, 11):\n",
    "    X_train, X_test, Y_train, Y_test = train_test_split(X, price, test_size=0.33)\n",
    "    # обучение\n",
    "    aNew = np.dot(np.dot(sla.inv(np.dot(np.transpose(XNew),XNew)),np.transpose(XNew)),Y_train);\n",
    "    aOld = np.dot(np.dot(sla.inv(np.dot(np.transpose(X),X)),np.transpose(X)),Y_train);\n",
    "    aNew = np.linalg.lstsq(XNew,Y_train, rcond = None)[0]\n",
    "    aOld = np.linalg.lstsq(X,Y_train, rcond = None)[0]\n",
    "    errorNew = error(XNew)\n",
    "    errorOld = error(X)\n",
    "    print(\"OLD everage error - \", errorOld, \"NEW everage error - \", errorNew)\n",
    "    #print(len(XNew[0]),len(Y_train))\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задание 3. Регуляризация (2 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вспомним, что задача линейной регрессии формулируется как задача нахождения проекции вектора значений объясняемой переменной $y$ на линейную оболочку $\\langle x_1,\\ldots,x_k\\rangle$ векторов значений регрессоров. Если векторы $x_1,\\ldots,x_k$ линейно зависимы, то матрица $X^TX$ вырожденна и задача не будет решаться (то есть будет, но не с помощью приведённой выше формулы). В жизни, по счастью, различные признаки редко бывают *в точности* линейно зависимы, однако во многих ситуациях они скоррелированы и становятся \"почти\" линейно зависимыми. Таковы, к примеру, зарплата человека, его уровень образования, цена машины и суммарная площадь недвижимости, которой он владеет. В этом случае матрица $X^TX$ будет близка к вырожденной, и это приводит к численной неустойчивости и плохому качеству решений; как следствие, будет иметь место переобучение. Один из симптомов этой проблемы &mdash; необычно большие по модулю компоненты вектора $a$.\n",
    "\n",
    "Есть много способов борьбы с этим злом. Один из них &mdash; регуляризация. Сейчас мы рассмотрим одну из её разновидностей &mdash; **L2-регуляризацию**. Идея в том, чтобы подправить матрицу $X^TX$, сделав её \"получше\". Например, это можно сделать, заменив её на $(X^TX + \\lambda E)$, где $\\lambda$ &mdash; некоторый скаляр. Пожертвовав точностью на обучающей выборке, мы тем не менее получаем численно более стабильное псевдорешение $a = (X^TX + \\lambda E)^{-1}X^Ty$ и снижаем эффект переобучения. Параметр $\\lambda$ нужно подбирать, и каких-то универсальных способов это делать нет, но зачастую можно его подобрать таким, чтобы ошибка на тестовой выборке падала. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь давайте вспомним первую задачу. Если вы её сделали, то помните, что ошибка аппроксимации многочленом шестой степени довольно высокая. Убедитесь, что, используя регуляризацию с хорошо подобранным коэффициентом $\\lambda$, ошибку на тестовой выборке можно сделать не больше, чем для многочлена оптимальной степени в модели без регрессии. Для этого $\\lambda$ сравните $\\det(X^TX)$ и $\\det(X^TX + \\lambda E)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Нарисуйте на одном чертеже графики многочленов шестой степени, приближающих неизвестную функцию, для модели с регуляризацией и без. Чем первый из них выгодно отличается от второго?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Попробуйте доказать, что вектор $a = (X^TX + \\lambda E)^{-1}X^Ty$ является решением задачи\n",
    "\n",
    "$$|Xa - y|^2 + \\lambda|a|^2\\rightarrow\\min$$\n",
    "\n",
    "Интуитивно это можно понимать так: мы ищем компромисс между минимизацией длины разности $|Xa - y|$ (то есть точностью решения задачи регрессии) и тем, чтобы компоненты вектора $a$ не становились слишком большими по модулю.\n",
    "\n",
    "---\n",
    "\n",
    "**Ваше решение напишите прямо здесь**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задание 4. Онлайн-обучение линейной регрессии (3 балла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Раньше мы работали в ситуации, когда объекты $x_i$ и значения $y_i$ даны с самого начала и всегда доступны. Допустим теперь, что пары $(x_i, y_i)$ поступают к нам по одной и мы не можем себе позволить хранить их все в памяти (это может быть актуально, например, если вы пытаетесь обучить модель на устройстве со сравнительно небольшим количеством оперативной памяти: скажем, на мобильном телефоне или на бортовом компьютере спутника связи). В этом случае нам нужно уметь решать следующую задачу:\n",
    "\n",
    "**Известно:** решение задачи регрессии для датасета $(x_1, y_1),\\ldots,(x_t,y_t)$;\n",
    "\n",
    "**На вход поступает:** новая пара $(x_{t+1}, y_{t+1})$;\n",
    "\n",
    "**Требуется:** быстро (за время, не зависящее от $t$) отыскать решение задачи регрессии для расширенного датасета $(x_1, y_1),\\ldots,(x_t,y_t),(x_{t+1}, y_{t+1})$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Эту задачу мы будем решать в два этапа.\n",
    "\n",
    "**Этап 1.** Введём обозначения $X_{(t)} = (x_1\\ldots x_t)$ и $y_{(t)} = (y_1,\\ldots,y_t)^T$. Тогда, как мы хорошо помним, решение задачи регрессии для датасета $(x_1, y_1),\\ldots,(x_t,y_t)$ имеет вид $\\hat{a}_{(t)} = \\left(X^T_{(t)}X_{(t)}\\right)^{-1}X^T_{(t)}y_{(t)}$. Размеры матриц $X^T_{(t)}X_{(t)}$ и $X^T_{(t)}y_{(t)}$ не зависят от $t$, поэтому их мы, пожалуй, можем себе позволить хранить в памяти.\n",
    "\n",
    "И вот ваше первое задание в этом разделе: придумайте алгоритм, принимающий на вход матрицы $X^T_{(t)}X_{(t)}$ и $X^T_{(t)}y_{(t)}$, а также пару $(x_{t+1}, y_{t+1})$ и вычисляющий матрицы $X^T_{(t+1)}X_{(t+1)}$ и $X^T_{(t+1)}y_{(t+1)}$. Сложность вашего алгоритма не должна зависеть от $t$!\n",
    "\n",
    "--\n",
    "\n",
    "**Описание вашего алгоритма напишите прямо здесь**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Этап 2.** Теперь настало время написать немного кода и порисовать красивые картинки. Вам нужно будет реализовать симуляцию онлайн-обучения регрессии для задачи приближения функции (в данном случае $f_{true}(x) = 2x\\sin(x) + x^2 - 1$; все значения искажены небольшим нормальным шумом) многочленом степени не выше 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "\n",
    "f_true = lambda x: 2*x*np.sin(5*x) + x**2 - 1 # this is the true function\n",
    "\n",
    "# We need this to make the plot of f_true:\n",
    "x_grid = np.linspace(-2,5,100) # 100 linearly spaced numbers\n",
    "x_grid_enl = np.hstack((x_grid.reshape((100,1))**j for j in range(6)))\n",
    "y_grid = f_true(x_grid)\n",
    "\n",
    "\n",
    "for i in range(200):\n",
    "\n",
    "    x_new = np.random.uniform(-2, 5)\n",
    "    y_new = f_true(x_new) + 2*np.random.randn()\n",
    "    \n",
    "    # your code goes here\n",
    "    \n",
    "    # the rest of code is just bells and whistles\n",
    "    if (i+1)%5==0:\n",
    "        clear_output(True)\n",
    "        plt.plot(x_grid,y_grid, color='blue', label='true f')\n",
    "        plt.scatter(x_new, y_new, color='red')\n",
    "        \n",
    "        # your code goes here\n",
    "        y_pred = #...\n",
    "        \n",
    "        plt.scatter(x_grid, y_pred, color='orange', linewidth=5, label='predicted f')\n",
    "        \n",
    "        plt.legend(loc='upper left')\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Добавление. QR-разложение"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**QR-разложением** матрицы $A$ (не обязательно квадратной) мы будем называть её представление в виде $A = QR$, где $Q$ &mdash; матрица с ортонормированными столбцами, а $R$ &mdash; верхнетреугольная матрица.\n",
    "\n",
    "Смысл QR-разложения следующий. Пусть $a_1,\\ldots,a_m$ &mdash; столбцы матрицы $A$, $q_1,\\ldots,q_t$ &mdash; столбцы матрицы $Q$. Тогда $q_1,\\ldots,q_t$ &mdash; это ортонормированный базис в подпространстве, являющемся линейной оболочкой векторов $a_1,\\ldots,a_m$, а в матрице $R$ записаны коэффициенты, с помощью которых $a_i$ выражаются через $q_1,\\ldots,q_t$.\n",
    "\n",
    "Находить QR-разложение заданной матрицы можно разными способами. Мы познакомим вас не с самым лучшим из них, но по крайней мере с наиболее простым концептуально. Заметим, что ортогональный базис линейной оболочки можно найти с помощью ортогонализации Грама-Шмидта. При этом коэффициенты из матрицы $R$ получаются в качестве побочного продукта этого процесса:\n",
    "\n",
    "```python\n",
    "for j = 1...n:\n",
    "    q_j = a_j\n",
    "    for i = 1,...,j-1:\n",
    "        r_ij = (q_i, a_j)\n",
    "        q_j = q_j - r_ij * q_i\n",
    "    r_jj = |q_j|\n",
    "    if r_jj == 0: # a_j in <a_1,...,a_j-1>\n",
    "        # What would you do in this case?..\n",
    "    q_j = q_j / r_jj\n",
    "```\n",
    "\n",
    "Для нахождения QR-разложения вы можете использовать библиотечную функцию `scipy.linalg.qr`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поскольку лабораторная про линейную регрессию, не так-то просто замять вопрос о том, какое же отношение QR-разложение имеет к задаче регрессии. Упомянем одно из возможных применений.\n",
    "\n",
    "Допустим, мы нашли QR-разложение матрицы $X$, а именно: $X = QR$. Тогда\n",
    "$$X^TX = (QR)^T(QR) = R^TQ^TQR = R^TR$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поскольку в задаче регрессии матрица $X$ обычного полного ранга (то есть её столбцы линейно независимы), матрица $R$ будет квадратной. Благодаря этому нашу обычную формулу для набора регрессионных коэффициентов $\\hat{a}$ можно переписать в следующем виде:\n",
    "\n",
    "$$\\hat{a} = (X^TX)^{-1}X^Ty = (R^TR)^{-1}(QR)^Ty = R^{-1}(R^T)^{-1}R^TQ^Ty = R^{-1}Q^Ty$$\n",
    "\n",
    "Как видите, формула стала проще. Более того, зачастую обращение матрицы $R$ может быть численно более устойчиво, чем обращение матрицы $X^TX$."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
